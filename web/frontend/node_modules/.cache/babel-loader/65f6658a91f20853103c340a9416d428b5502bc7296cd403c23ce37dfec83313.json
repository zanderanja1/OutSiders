{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Downloads/sp_v4_sample 2/frontend/src/components/Photos.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Photo from './Photo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Photos() {\n  _s();\n  const [photos, setPhotos] = useState([]);\n  const navigate = useNavigate();\n  const intersectionObserverRef = useRef(null);\n  useEffect(() => {\n    const getPhotos = async () => {\n      try {\n        const res = await fetch('http://localhost:3001/photos');\n        const data = await res.json();\n        setPhotos(data);\n      } catch (error) {\n        console.error('Error fetching photos:', error);\n      }\n    };\n    getPhotos();\n  }, []);\n  const handleIntersection = photoId => {\n    document.body.style = 'background: blue;';\n    console.log('View +1'); // Log when photo becomes visible in viewport\n    // You can implement the logic to increment the view count here\n  };\n\n  useEffect(() => {\n    intersectionObserverRef.current = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const photoId = entry.target.dataset.photoId;\n          handleIntersection(photoId);\n          intersectionObserverRef.current.unobserve(entry.target);\n        }\n      });\n    });\n    return () => {\n      if (intersectionObserverRef.current) {\n        intersectionObserverRef.current.disconnect();\n      }\n    };\n  }, [handleIntersection]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      ref: intersectionObserverRef,\n      children: \"Photos:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: photos.map(photo => /*#__PURE__*/_jsxDEV(Photo, {\n        photo: photo,\n        handleClick: () => navigate(`/photo/${photo._id}`),\n        intersectionObserverRef: intersectionObserverRef\n      }, photo._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Photos, \"CSigSGog6SoCUw3uEf/p3dQASJQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Photos;\nexport default Photos;\nvar _c;\n$RefreshReg$(_c, \"Photos\");","map":{"version":3,"names":["useState","useEffect","useRef","useNavigate","Photo","jsxDEV","_jsxDEV","Photos","_s","photos","setPhotos","navigate","intersectionObserverRef","getPhotos","res","fetch","data","json","error","console","handleIntersection","photoId","document","body","style","log","current","IntersectionObserver","entries","forEach","entry","isIntersecting","target","dataset","unobserve","disconnect","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","photo","handleClick","_id","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Downloads/sp_v4_sample 2/frontend/src/components/Photos.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Photo from './Photo';\r\n\r\nfunction Photos() {\r\n  const [photos, setPhotos] = useState([]);\r\n  const navigate = useNavigate();\r\n  const intersectionObserverRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const getPhotos = async () => {\r\n      try {\r\n        const res = await fetch('http://localhost:3001/photos');\r\n        const data = await res.json();\r\n        setPhotos(data);\r\n      } catch (error) {\r\n        console.error('Error fetching photos:', error);\r\n      }\r\n    };\r\n\r\n    getPhotos();\r\n  }, []);\r\n\r\n  const handleIntersection = (photoId) => {\r\n    document.body.style = 'background: blue;'\r\n    console.log('View +1'); // Log when photo becomes visible in viewport\r\n    // You can implement the logic to increment the view count here\r\n  };\r\n\r\n  useEffect(() => {\r\n    intersectionObserverRef.current = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          const photoId = entry.target.dataset.photoId;\r\n          handleIntersection(photoId);\r\n          intersectionObserverRef.current.unobserve(entry.target);\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      if (intersectionObserverRef.current) {\r\n        intersectionObserverRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [handleIntersection]);\r\n\r\n  return (\r\n    <div>\r\n      <h3 ref={intersectionObserverRef}>Photos:</h3>\r\n      <ul>\r\n        {photos.map((photo) => (\r\n          <Photo\r\n            photo={photo}\r\n            key={photo._id}\r\n            handleClick={() => navigate(`/photo/${photo._id}`)}\r\n            intersectionObserverRef={intersectionObserverRef}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photos;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMW,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,uBAAuB,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QACvD,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7BP,SAAS,CAACM,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,kBAAkB,GAAIC,OAAO,IAAK;IACtCC,QAAQ,CAACC,IAAI,CAACC,KAAK,GAAG,mBAAmB;IACzCL,OAAO,CAACM,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;;EAEDxB,SAAS,CAAC,MAAM;IACdW,uBAAuB,CAACc,OAAO,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;MACtEA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxB,MAAMV,OAAO,GAAGS,KAAK,CAACE,MAAM,CAACC,OAAO,CAACZ,OAAO;UAC5CD,kBAAkB,CAACC,OAAO,CAAC;UAC3BT,uBAAuB,CAACc,OAAO,CAACQ,SAAS,CAACJ,KAAK,CAACE,MAAM,CAAC;QACzD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIpB,uBAAuB,CAACc,OAAO,EAAE;QACnCd,uBAAuB,CAACc,OAAO,CAACS,UAAU,CAAC,CAAC;MAC9C;IACF,CAAC;EACH,CAAC,EAAE,CAACf,kBAAkB,CAAC,CAAC;EAExB,oBACEd,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAI+B,GAAG,EAAEzB,uBAAwB;MAAAwB,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9CnC,OAAA;MAAA8B,QAAA,EACG3B,MAAM,CAACiC,GAAG,CAAEC,KAAK,iBAChBrC,OAAA,CAACF,KAAK;QACJuC,KAAK,EAAEA,KAAM;QAEbC,WAAW,EAAEA,CAAA,KAAMjC,QAAQ,CAAE,UAASgC,KAAK,CAACE,GAAI,EAAC,CAAE;QACnDjC,uBAAuB,EAAEA;MAAwB,GAF5C+B,KAAK,CAACE,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGf,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACjC,EAAA,CA1DQD,MAAM;EAAA,QAEIJ,WAAW;AAAA;AAAA2C,EAAA,GAFrBvC,MAAM;AA4Df,eAAeA,MAAM;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}