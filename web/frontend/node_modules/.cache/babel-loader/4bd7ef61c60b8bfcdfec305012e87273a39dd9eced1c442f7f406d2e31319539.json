{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Attractions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Attractions() {\n  _s();\n  const [attractions, setAttractions] = useState([]);\n  useEffect(() => {\n    const getAttractions = async () => {\n      try {\n        const res = await fetch('http://localhost:3001/attraction');\n        const data = await res.json();\n        const districtNames = [...new Set(data.map(attraction => attraction.district.name))];\n        const districtPromises = districtNames.map(async districtName => {\n          const res = await fetch('http://localhost:3001/district/' + districtName);\n          return res.json();\n        });\n        const districtResponses = await Promise.all(districtPromises);\n        const districts = districtResponses.reduce((acc, response) => [...acc, ...response], []);\n        const cityNames = [...new Set(districts.map(district => district.city.name))];\n        const cityPromises = cityNames.map(async cityName => {\n          const res = await fetch('http://localhost:3001/city/' + cityName);\n          return res.json();\n        });\n        const cityResponses = await Promise.all(cityPromises);\n        const cities = cityResponses.reduce((acc, response) => [...acc, ...response], []);\n        const combinedData = data.map(attraction => {\n          const district = districts.find(district => district.name === attraction.district.name);\n          const city = cities.find(city => city.name === district.city.name);\n          return {\n            ...attraction,\n            district,\n            city,\n            isEditing: false\n          };\n        });\n        setAttractions(combinedData);\n      } catch (error) {\n        console.error('Error fetching attractions:', error);\n      }\n    };\n    getAttractions();\n  }, []);\n  const handleEditClick = index => {\n    const updatedAttractions = [...attractions];\n    updatedAttractions[index].isEditing = true;\n    setAttractions(updatedAttractions);\n  };\n  const handleInputChange = (index, field, value) => {\n    const updatedAttractions = [...attractions];\n    updatedAttractions[index][field] = value;\n    setAttractions(updatedAttractions);\n  };\n  const updateAttraction = async index => {\n    const attraction = attractions[index];\n    const {\n      _id,\n      name,\n      district,\n      city,\n      coordinates\n    } = attraction;\n    try {\n      const updatePromises = [];\n      if (attraction.name !== name) {\n        updatePromises.push(fetch(`http://localhost:3001/attraction/update/${_id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name\n          })\n        }));\n      }\n      if (attraction.district.name !== district.name) {\n        updatePromises.push(fetch(`http://localhost:3001/district/update/${district._id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: district.name\n            // other district fields to update\n          })\n        }));\n      }\n\n      if (attraction.city.name !== city.name) {\n        updatePromises.push(fetch(`http://localhost:3001/city/update/${city._id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: city.name\n            // other city fields to update\n          })\n        }));\n      }\n\n      // Update the attraction coordinates if any of the coordinate values changed\n      const [currentLat, currentLng] = attraction.coordinates;\n      const [newLat, newLng] = coordinates;\n      if (currentLat !== newLat || currentLng !== newLng) {\n        updatePromises.push(fetch(`http://localhost:3001/attraction/update/${_id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            coordinates\n          })\n        }));\n      }\n\n      // Wait for all update requests to complete\n      const updateResponses = await Promise.all(updatePromises);\n\n      // Check if all updates were successful\n      const allUpdatesSuccessful = updateResponses.every(res => res.ok);\n      if (allUpdatesSuccessful) {\n        const updatedAttractions = [...attractions];\n        updatedAttractions[index].isEditing = false;\n        setAttractions(updatedAttractions);\n      } else {\n        console.error('Error updating attraction');\n      }\n    } catch (error) {\n      console.error('Error updating attraction:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Attractions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), attractions.map((attraction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: attraction.isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: attraction.name,\n          onChange: e => handleInputChange(index, 'name', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: attraction.district.name,\n          onChange: e => handleInputChange(index, 'district', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: attraction.city.name,\n          onChange: e => handleInputChange(index, 'city', e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: attraction.coordinates[0],\n          onChange: e => handleInputChange(index, 'coordinates', [e.target.value, attraction.coordinates[1]])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: attraction.coordinates[1],\n          onChange: e => handleInputChange(index, 'coordinates', [attraction.coordinates[0], e.target.value])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateAttraction(index),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [attraction.name, \", \", attraction.district.name, \", \", attraction.city.name, \": \", attraction.coordinates[0], \",\", ' ', attraction.coordinates[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditClick(index),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_s(Attractions, \"Wfkc85x8ifE1kt57u76KKjzjzL4=\");\n_c = Attractions;\nexport default Attractions;\nvar _c;\n$RefreshReg$(_c, \"Attractions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Attractions","_s","attractions","setAttractions","getAttractions","res","fetch","data","json","districtNames","Set","map","attraction","district","name","districtPromises","districtName","districtResponses","Promise","all","districts","reduce","acc","response","cityNames","city","cityPromises","cityName","cityResponses","cities","combinedData","find","isEditing","error","console","handleEditClick","index","updatedAttractions","handleInputChange","field","value","updateAttraction","_id","coordinates","updatePromises","push","method","headers","body","JSON","stringify","currentLat","currentLng","newLat","newLng","updateResponses","allUpdatesSuccessful","every","ok","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Attractions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Attractions() {\r\n  const [attractions, setAttractions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getAttractions = async () => {\r\n      try {\r\n        const res = await fetch('http://localhost:3001/attraction');\r\n        const data = await res.json();\r\n        \r\n        const districtNames = [...new Set(data.map((attraction) => attraction.district.name))];\r\n        const districtPromises = districtNames.map(async (districtName) => {\r\n          const res = await fetch('http://localhost:3001/district/' + districtName);\r\n          return res.json();\r\n        });\r\n        const districtResponses = await Promise.all(districtPromises);\r\n        const districts = districtResponses.reduce((acc, response) => [...acc, ...response], []);\r\n\r\n        const cityNames = [...new Set(districts.map((district) => district.city.name))];\r\n        const cityPromises = cityNames.map(async (cityName) => {\r\n          const res = await fetch('http://localhost:3001/city/' + cityName);\r\n          return res.json();\r\n        });\r\n        const cityResponses = await Promise.all(cityPromises);\r\n        const cities = cityResponses.reduce((acc, response) => [...acc, ...response], []);\r\n\r\n        const combinedData = data.map((attraction) => {\r\n          const district = districts.find((district) => district.name === attraction.district.name);\r\n          const city = cities.find((city) => city.name === district.city.name);\r\n          return { ...attraction, district, city, isEditing: false };\r\n        });\r\n\r\n        setAttractions(combinedData);\r\n      } catch (error) {\r\n        console.error('Error fetching attractions:', error);\r\n      }\r\n    };\r\n\r\n    getAttractions();\r\n  }, []);\r\n\r\n  const handleEditClick = (index) => {\r\n    const updatedAttractions = [...attractions];\r\n    updatedAttractions[index].isEditing = true;\r\n    setAttractions(updatedAttractions);\r\n  };\r\n\r\n  const handleInputChange = (index, field, value) => {\r\n    const updatedAttractions = [...attractions];\r\n    updatedAttractions[index][field] = value;\r\n    setAttractions(updatedAttractions);\r\n  };\r\n\r\n  const updateAttraction = async (index) => {\r\n    const attraction = attractions[index];\r\n    const { _id, name, district, city, coordinates } = attraction;\r\n\r\n    try {\r\n      const updatePromises = [];\r\n\r\n      if (attraction.name !== name) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/attraction/update/${_id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name,\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      if (attraction.district.name !== district.name) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/district/update/${district._id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name: district.name,\r\n              // other district fields to update\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      if (attraction.city.name !== city.name) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/city/update/${city._id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name: city.name,\r\n              // other city fields to update\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      // Update the attraction coordinates if any of the coordinate values changed\r\n      const [currentLat, currentLng] = attraction.coordinates;\r\n      const [newLat, newLng] = coordinates;\r\n      if (currentLat !== newLat || currentLng !== newLng) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/attraction/update/${_id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              coordinates,\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      // Wait for all update requests to complete\r\n      const updateResponses = await Promise.all(updatePromises);\r\n\r\n      // Check if all updates were successful\r\n      const allUpdatesSuccessful = updateResponses.every((res) => res.ok);\r\n\r\n      if (allUpdatesSuccessful) {\r\n        const updatedAttractions = [...attractions];\r\n        updatedAttractions[index].isEditing = false;\r\n        setAttractions(updatedAttractions);\r\n      } else {\r\n        console.error('Error updating attraction');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating attraction:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Attractions:</h3>\r\n      {attractions.map((attraction, index) => (\r\n        <div key={index}>\r\n          {attraction.isEditing ? (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.name}\r\n                onChange={(e) => handleInputChange(index, 'name', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.district.name}\r\n                onChange={(e) => handleInputChange(index, 'district', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.city.name}\r\n                onChange={(e) => handleInputChange(index, 'city', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.coordinates[0]}\r\n                onChange={(e) =>\r\n                  handleInputChange(index, 'coordinates', [e.target.value, attraction.coordinates[1]])\r\n                }\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.coordinates[1]}\r\n                onChange={(e) =>\r\n                  handleInputChange(index, 'coordinates', [attraction.coordinates[0], e.target.value])\r\n                }\r\n              />\r\n              <button onClick={() => updateAttraction(index)}>Update</button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <p>\r\n                {attraction.name}, {attraction.district.name}, {attraction.city.name}: {attraction.coordinates[0]},{' '}\r\n                {attraction.coordinates[1]}\r\n              </p>\r\n              <button onClick={() => handleEditClick(index)}>Edit</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Attractions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}