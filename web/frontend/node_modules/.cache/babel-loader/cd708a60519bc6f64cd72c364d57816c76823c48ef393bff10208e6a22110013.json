{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\nimport { Chart, CategoryScale, LinearScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale);\nfunction App() {\n  _s();\n  const [graphType, setGraphType] = useState();\n  const [attractionsData, setAttractionsData] = useState([]);\n  setGraphType('bar');\n  useEffect(() => {\n    fetchAttractionData();\n  }, []);\n  async function fetchAttractionData() {\n    try {\n      const [regions, cities, districts, attractions] = await Promise.all([fetch('http://localhost:3001/region/').then(res => res.json()), fetch('http://localhost:3001/city/').then(res => res.json()), fetch('http://localhost:3001/district/').then(res => res.json()), fetch('http://localhost:3001/attraction/list').then(res => res.json())]);\n\n      // Process the data and set it to the state\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\n      setAttractionsData(processedData);\n    } catch (error) {\n      console.error('Error fetching attraction data:', error);\n    }\n  }\n  function processAttractionsData(attractions, districts, cities, regions) {\n    // Process the data here based on your requirements\n    // Return the processed data in a suitable format for the chosen graph type\n    // For example, for a Pie Chart, you may need labels and counts of attractions in each region\n\n    const regionCount = attractions.reduce((count, attraction) => {\n      const district = districts.find(dist => dist.name === attraction.district.name);\n      const city = cities.find(cty => cty._id === district.cityId);\n      const region = regions.find(reg => reg._id === city.regionId);\n      const regionName = region.name;\n      count[regionName] = (count[regionName] || 0) + 1;\n      return count;\n    }, {});\n    const labels = Object.keys(regionCount);\n    const counts = Object.values(regionCount);\n    return {\n      labels,\n      counts\n    };\n  }\n  function renderGraph() {\n    if (graphType === 'bar') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          label: 'Attractions by Region',\n          data: attractionsData.counts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'pie') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          data: attractionsData.counts,\n          backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)']\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Pie Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: graphType,\n      onChange: e => setGraphType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"bar\",\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pie\",\n        children: \"Pie Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), renderGraph()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GYmzY5qlyIRIuAlqGhctBEiJ0p4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Pie","Chart","CategoryScale","LinearScale","jsxDEV","_jsxDEV","register","App","_s","graphType","setGraphType","attractionsData","setAttractionsData","fetchAttractionData","regions","cities","districts","attractions","Promise","all","fetch","then","res","json","processedData","processAttractionsData","error","console","regionCount","reduce","count","attraction","district","find","dist","name","city","cty","_id","cityId","region","reg","regionId","regionName","labels","Object","keys","counts","values","renderGraph","chartData","datasets","label","data","backgroundColor","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar, Pie } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale } from 'chart.js';\r\n\r\nChart.register(CategoryScale, LinearScale);\r\n\r\nfunction App() {\r\n  const [graphType, setGraphType] = useState();\r\n  const [attractionsData, setAttractionsData] = useState([]);\r\n  setGraphType('bar')\r\n  useEffect(() => {\r\n    fetchAttractionData();\r\n  }, []);\r\n\r\n  async function fetchAttractionData() {\r\n    try {\r\n      const [regions, cities, districts, attractions] = await Promise.all([\r\n        fetch('http://localhost:3001/region/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/city/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/district/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/attraction/list').then((res) => res.json())\r\n      ]);\r\n\r\n      // Process the data and set it to the state\r\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\r\n      setAttractionsData(processedData);\r\n    } catch (error) {\r\n      console.error('Error fetching attraction data:', error);\r\n    }\r\n  }\r\n\r\n  function processAttractionsData(attractions, districts, cities, regions) {\r\n    // Process the data here based on your requirements\r\n    // Return the processed data in a suitable format for the chosen graph type\r\n    // For example, for a Pie Chart, you may need labels and counts of attractions in each region\r\n\r\n    const regionCount = attractions.reduce((count, attraction) => {\r\n      const district = districts.find((dist) => dist.name === attraction.district.name);\r\n      const city = cities.find((cty) => cty._id === district.cityId);\r\n      const region = regions.find((reg) => reg._id === city.regionId);\r\n      const regionName = region.name;\r\n\r\n      count[regionName] = (count[regionName] || 0) + 1;\r\n      return count;\r\n    }, {});\r\n\r\n    const labels = Object.keys(regionCount);\r\n    const counts = Object.values(regionCount);\r\n\r\n    return {\r\n      labels,\r\n      counts\r\n    };\r\n  }\r\n\r\n  function renderGraph() {\r\n    if (graphType === 'bar') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Region',\r\n            data: attractionsData.counts,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Bar Chart)</h2>\r\n          <Bar data={chartData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'pie') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            data: attractionsData.counts,\r\n            backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)']\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Pie Chart)</h2>\r\n          <Pie data={chartData} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>My App</h1>\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        <option value=\"bar\">Bar Chart</option>\r\n        <option value=\"pie\">Pie Chart</option>\r\n      </select>\r\n      {renderGraph()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AAC1C,SAASC,KAAK,EAAEC,aAAa,EAAEC,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7DJ,KAAK,CAACK,QAAQ,CAACJ,aAAa,EAAEC,WAAW,CAAC;AAE1C,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1Da,YAAY,CAAC,KAAK,CAAC;EACnBZ,SAAS,CAAC,MAAM;IACde,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,mBAAmBA,CAAA,EAAG;IACnC,IAAI;MACF,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClEC,KAAK,CAAC,+BAA+B,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,EAChEH,KAAK,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,EAC9DH,KAAK,CAAC,iCAAiC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,EAClEH,KAAK,CAAC,uCAAuC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzE,CAAC;;MAEF;MACA,MAAMC,aAAa,GAAGC,sBAAsB,CAACR,WAAW,EAAED,SAAS,EAAED,MAAM,EAAED,OAAO,CAAC;MACrFF,kBAAkB,CAACY,aAAa,CAAC;IACnC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;EAEA,SAASD,sBAAsBA,CAACR,WAAW,EAAED,SAAS,EAAED,MAAM,EAAED,OAAO,EAAE;IACvE;IACA;IACA;;IAEA,MAAMc,WAAW,GAAGX,WAAW,CAACY,MAAM,CAAC,CAACC,KAAK,EAAEC,UAAU,KAAK;MAC5D,MAAMC,QAAQ,GAAGhB,SAAS,CAACiB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKJ,UAAU,CAACC,QAAQ,CAACG,IAAI,CAAC;MACjF,MAAMC,IAAI,GAAGrB,MAAM,CAACkB,IAAI,CAAEI,GAAG,IAAKA,GAAG,CAACC,GAAG,KAAKN,QAAQ,CAACO,MAAM,CAAC;MAC9D,MAAMC,MAAM,GAAG1B,OAAO,CAACmB,IAAI,CAAEQ,GAAG,IAAKA,GAAG,CAACH,GAAG,KAAKF,IAAI,CAACM,QAAQ,CAAC;MAC/D,MAAMC,UAAU,GAAGH,MAAM,CAACL,IAAI;MAE9BL,KAAK,CAACa,UAAU,CAAC,GAAG,CAACb,KAAK,CAACa,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;MAChD,OAAOb,KAAK;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAMc,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAClB,WAAW,CAAC;IACvC,MAAMmB,MAAM,GAAGF,MAAM,CAACG,MAAM,CAACpB,WAAW,CAAC;IAEzC,OAAO;MACLgB,MAAM;MACNG;IACF,CAAC;EACH;EAEA,SAASE,WAAWA,CAAA,EAAG;IACrB,IAAIxC,SAAS,KAAK,KAAK,EAAE;MACvB,MAAMyC,SAAS,GAAG;QAChBN,MAAM,EAAEjC,eAAe,CAACiC,MAAM;QAC9BO,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,uBAAuB;UAC9BC,IAAI,EAAE1C,eAAe,CAACoC,MAAM;UAC5BO,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MAED,oBACEnD,OAAA;QAAAoD,QAAA,gBACEpD,OAAA;UAAAoD,QAAA,EAAI;QAAiC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1CxD,OAAA,CAACN,GAAG;UAACsD,IAAI,EAAEH;QAAU;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAEV,CAAC,MAAM,IAAIpD,SAAS,KAAK,KAAK,EAAE;MAC9B,MAAMyC,SAAS,GAAG;QAChBN,MAAM,EAAEjC,eAAe,CAACiC,MAAM;QAC9BO,QAAQ,EAAE,CACR;UACEE,IAAI,EAAE1C,eAAe,CAACoC,MAAM;UAC5BO,eAAe,EAAE,CAAC,yBAAyB,EAAE,yBAAyB,EAAE,yBAAyB;QACnG,CAAC;MAEL,CAAC;MAED,oBACEjD,OAAA;QAAAoD,QAAA,gBACEpD,OAAA;UAAAoD,QAAA,EAAI;QAAiC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1CxD,OAAA,CAACL,GAAG;UAACqD,IAAI,EAAEH;QAAU;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAEV;IAEA,OAAO,IAAI;EACb;EAEA,oBACExD,OAAA;IAAAoD,QAAA,gBACEpD,OAAA;MAAAoD,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfxD,OAAA;MAAQyD,KAAK,EAAErD,SAAU;MAACsD,QAAQ,EAAGC,CAAC,IAAKtD,YAAY,CAACsD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAL,QAAA,gBACtEpD,OAAA;QAAQyD,KAAK,EAAC,KAAK;QAAAL,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtCxD,OAAA;QAAQyD,KAAK,EAAC,KAAK;QAAAL,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EACRZ,WAAW,CAAC,CAAC;EAAA;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACrD,EAAA,CAtGQD,GAAG;AAAA2D,EAAA,GAAH3D,GAAG;AAwGZ,eAAeA,GAAG;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}