{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [attractions, setAttractions] = useState([]);\n  useEffect(() => {\n    fetchAttractionData();\n  }, []);\n  async function fetchAttractionData() {\n    try {\n      const [regions, cities, districts, attractions] = await Promise.all([fetch('http://localhost:3001/region/').then(res => res.json()), fetch('http://localhost:3001/city/').then(res => res.json()), fetch('http://localhost:3001/district/').then(res => res.json()), fetch('http://localhost:3001/attraction/list').then(res => res.json())]);\n      console.log(regions);\n      console.log(cities);\n      console.log(districts);\n      console.log(attractions);\n      setAttractions(attractions);\n    } catch (error) {\n      console.error('Error fetching attraction data:', error);\n    }\n  }\n  function createGraph(attractions) {\n    const regionCount = attractions.reduce((count, attraction) => {\n      const region = attraction.district.city.region.name;\n      count[region] = (count[region] || 0) + 1;\n      return count;\n    }, {});\n    const labels = Object.keys(regionCount);\n    const counts = Object.values(regionCount);\n    const chartData = {\n      labels,\n      datasets: [{\n        label: 'Attractions by Region',\n        data: counts,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n    return renderGraph(chartData);\n  }\n  function renderGraph(chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Attractions by Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), createGraph(attractions)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Wfkc85x8ifE1kt57u76KKjzjzL4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Bar","jsxDEV","_jsxDEV","App","_s","attractions","setAttractions","fetchAttractionData","regions","cities","districts","Promise","all","fetch","then","res","json","console","log","error","createGraph","regionCount","reduce","count","attraction","region","district","city","name","labels","Object","keys","counts","values","chartData","datasets","label","data","backgroundColor","borderColor","borderWidth","renderGraph","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nfunction App() {\r\n  const [attractions, setAttractions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAttractionData();\r\n  }, []);\r\n\r\n  async function fetchAttractionData() {\r\n    try {\r\n      const [regions, cities, districts, attractions] = await Promise.all([\r\n        fetch('http://localhost:3001/region/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/city/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/district/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/attraction/list').then((res) => res.json())\r\n      ]);\r\n\r\n      console.log(regions);\r\n      console.log(cities);\r\n      console.log(districts);\r\n      console.log(attractions);\r\n\r\n      setAttractions(attractions);\r\n    } catch (error) {\r\n      console.error('Error fetching attraction data:', error);\r\n    }\r\n  }\r\n\r\n  function createGraph(attractions) {\r\n    const regionCount = attractions.reduce((count, attraction) => {\r\n      const region = attraction.district.city.region.name;\r\n      count[region] = (count[region] || 0) + 1;\r\n      return count;\r\n    }, {});\r\n\r\n    const labels = Object.keys(regionCount);\r\n    const counts = Object.values(regionCount);\r\n\r\n    const chartData = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Attractions by Region',\r\n          data: counts,\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    return renderGraph(chartData);\r\n  }\r\n\r\n  function renderGraph(chartData) {\r\n    return (\r\n      <div>\r\n        <h2>Attractions by Region</h2>\r\n        <Bar data={chartData} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>My App</h1>\r\n      {createGraph(attractions)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}