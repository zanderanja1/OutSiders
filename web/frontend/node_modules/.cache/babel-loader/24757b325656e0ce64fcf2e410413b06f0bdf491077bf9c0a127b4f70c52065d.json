{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar, Pie, Scatter } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [graphType, setGraphType] = useState('bar');\n  const [attractionsData, setAttractionsData] = useState([]);\n  useEffect(() => {\n    fetchAttractionData();\n  }, []);\n  async function fetchAttractionData() {\n    try {\n      const [regions, cities, districts, attractions] = await Promise.all([fetch('http://localhost:3001/region/').then(res => res.json()), fetch('http://localhost:3001/city/').then(res => res.json()), fetch('http://localhost:3001/district/').then(res => res.json()), fetch('http://localhost:3001/attraction/list').then(res => res.json())]);\n\n      // Process the data and set it to the state\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\n      setAttractionsData(processedData);\n    } catch (error) {\n      console.error('Error fetching attraction data:', error);\n    }\n  }\n  function processAttractionsData(attractions, districts, cities, regions) {\n    // Process the data here based on your requirements\n    // Return the processed data in a suitable format for the chosen graph type\n\n    if (graphType === 'scatter') {\n      const scatterData = attractions.map(attraction => {\n        const district = districts.find(dist => dist.name === attraction.district.name);\n        const city = cities.find(cty => cty._id === district.cityId);\n        const region = regions.find(reg => reg._id === city.regionId);\n        return {\n          x: attraction.coordinates[0],\n          y: attraction.coordinates[1],\n          region: region.name,\n          attraction: attraction.name\n        };\n      });\n      return scatterData;\n    } else if (graphType === 'bar') {\n      const regionCount = attractions.reduce((count, attraction) => {\n        const district = districts.find(dist => dist.name === attraction.district.name);\n        const city = cities.find(cty => cty._id === district.cityId);\n        const region = regions.find(reg => reg._id === city.regionId);\n        const regionName = region.name;\n        count[regionName] = (count[regionName] || 0) + 1;\n        return count;\n      }, {});\n      const labels = Object.keys(regionCount);\n      const counts = Object.values(regionCount);\n      return {\n        labels,\n        counts\n      };\n    } else if (graphType === 'stackedBar') {\n      const cityDistrictCount = cities.reduce((count, city) => {\n        const districtCount = {};\n        districts.filter(dist => dist.cityId === city._id).forEach(district => {\n          districtCount[district.name] = attractions.filter(attraction => attraction.district.name === district.name).length;\n        });\n        count[city.name] = districtCount;\n        return count;\n      }, {});\n      const labels = Object.keys(cityDistrictCount);\n      const datasets = Object.entries(cityDistrictCount).map(_ref => {\n        let [city, districtCount] = _ref;\n        return {\n          label: city,\n          data: Object.values(districtCount),\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        };\n      });\n      return {\n        labels,\n        datasets\n      };\n    }\n  }\n  function renderGraph() {\n    if (graphType === 'bar') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          label: 'Attractions by Region',\n          data: attractionsData.counts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'pie') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          data: attractionsData.counts,\n          backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\n          borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Pie Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'scatter') {\n      const scatterData = {\n        datasets: [{\n          label: 'Attractions by Location',\n          data: attractionsData,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Location (Scatter Plot)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          data: scatterData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'scatter') {\n      const scatterData = {\n        datasets: [{\n          label: 'Attractions by Location',\n          data: attractionsData,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Location (Scatter Plot)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          data: scatterData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: graphType,\n      onChange: e => setGraphType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"bar\",\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pie\",\n        children: \"Pie Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"scatter\",\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"stackedBar\",\n        children: \"Stacked Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), renderGraph()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"En/76F/UaHxtN1CtD1yapLxhBfI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Pie","Scatter","Chart","jsxDEV","_jsxDEV","App","_s","graphType","setGraphType","attractionsData","setAttractionsData","fetchAttractionData","regions","cities","districts","attractions","Promise","all","fetch","then","res","json","processedData","processAttractionsData","error","console","scatterData","map","attraction","district","find","dist","name","city","cty","_id","cityId","region","reg","regionId","x","coordinates","y","regionCount","reduce","count","regionName","labels","Object","keys","counts","values","cityDistrictCount","districtCount","filter","forEach","length","datasets","entries","_ref","label","data","backgroundColor","borderColor","borderWidth","renderGraph","chartData","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar, Pie, Scatter } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction App() {\r\n  const [graphType, setGraphType] = useState('bar');\r\n  const [attractionsData, setAttractionsData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAttractionData();\r\n  }, []);\r\n\r\n  async function fetchAttractionData() {\r\n    try {\r\n      const [regions, cities, districts, attractions] = await Promise.all([\r\n        fetch('http://localhost:3001/region/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/city/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/district/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/attraction/list').then((res) => res.json())\r\n      ]);\r\n\r\n      // Process the data and set it to the state\r\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\r\n      setAttractionsData(processedData);\r\n    } catch (error) {\r\n      console.error('Error fetching attraction data:', error);\r\n    }\r\n  }\r\n\r\n  function processAttractionsData(attractions, districts, cities, regions) {\r\n    // Process the data here based on your requirements\r\n    // Return the processed data in a suitable format for the chosen graph type\r\n\r\n    if (graphType === 'scatter') {\r\n      const scatterData = attractions.map((attraction) => {\r\n        const district = districts.find((dist) => dist.name === attraction.district.name);\r\n        const city = cities.find((cty) => cty._id === district.cityId);\r\n        const region = regions.find((reg) => reg._id === city.regionId);\r\n\r\n        return {\r\n          x: attraction.coordinates[0],\r\n          y: attraction.coordinates[1],\r\n          region: region.name,\r\n          attraction: attraction.name\r\n        };\r\n      });\r\n\r\n      return scatterData;\r\n    } else if (graphType === 'bar') {\r\n      const regionCount = attractions.reduce((count, attraction) => {\r\n        const district = districts.find((dist) => dist.name === attraction.district.name);\r\n        const city = cities.find((cty) => cty._id === district.cityId);\r\n        const region = regions.find((reg) => reg._id === city.regionId);\r\n        const regionName = region.name;\r\n\r\n        count[regionName] = (count[regionName] || 0) + 1;\r\n        return count;\r\n      }, {});\r\n\r\n      const labels = Object.keys(regionCount);\r\n      const counts = Object.values(regionCount);\r\n\r\n      return {\r\n        labels,\r\n        counts\r\n      };\r\n    } else if (graphType === 'stackedBar') {\r\n      const cityDistrictCount = cities.reduce((count, city) => {\r\n        const districtCount = {};\r\n        districts\r\n          .filter((dist) => dist.cityId === city._id)\r\n          .forEach((district) => {\r\n            districtCount[district.name] = attractions.filter(\r\n              (attraction) => attraction.district.name === district.name\r\n            ).length;\r\n          });\r\n        count[city.name] = districtCount;\r\n        return count;\r\n      }, {});\r\n\r\n      const labels = Object.keys(cityDistrictCount);\r\n      const datasets = Object.entries(cityDistrictCount).map(([city, districtCount]) => ({\r\n        label: city,\r\n        data: Object.values(districtCount),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1\r\n      }));\r\n\r\n      return {\r\n        labels,\r\n        datasets\r\n      };\r\n    }\r\n  }\r\n\r\n  function renderGraph() {\r\n    if (graphType === 'bar') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Region',\r\n            data: attractionsData.counts,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Bar Chart)</h2>\r\n          <Bar data={chartData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'pie') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            data: attractionsData.counts,\r\n            backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\r\n            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Pie Chart)</h2>\r\n          <Pie data={chartData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'scatter') {\r\n      const scatterData = {\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Location',\r\n            data: attractionsData,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Location (Scatter Plot)</h2>\r\n          <Scatter data={scatterData} />\r\n        </div>\r\n      );\r\n    }else if (graphType === 'scatter') {\r\n      const scatterData = {\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Location',\r\n            data: attractionsData,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Location (Scatter Plot)</h2>\r\n          <Scatter data={scatterData} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>My App</h1>\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        <option value=\"bar\">Bar Chart</option>\r\n        <option value=\"pie\">Pie Chart</option>\r\n        <option value=\"scatter\">Scatter Plot</option>\r\n        <option value=\"stackedBar\">Stacked Bar Chart</option>\r\n      </select>\r\n      {renderGraph()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}