{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar, Pie, Scatter } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [graphType, setGraphType] = useState('bar');\n  const [attractionsData, setAttractionsData] = useState([]);\n  useEffect(() => {\n    fetchAttractionData();\n  }, []);\n  async function fetchAttractionData() {\n    try {\n      const [regions, cities, districts, attractions] = await Promise.all([fetch('http://localhost:3001/region/').then(res => res.json()), fetch('http://localhost:3001/city/').then(res => res.json()), fetch('http://localhost:3001/district/').then(res => res.json()), fetch('http://localhost:3001/attraction/list').then(res => res.json())]);\n\n      // Process the data and set it to the state\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\n      setAttractionsData(processedData);\n    } catch (error) {\n      console.error('Error fetching attraction data:', error);\n    }\n  }\n  function processAttractionsData(attractions, districts, cities, regions) {\n    if (graphType === 'scatter') {\n      const scatterData = attractions.map(attraction => {\n        const district = districts.find(dist => dist.name === attraction.district.name);\n        const city = cities.find(cty => cty._id === district.cityId);\n        const region = regions.find(reg => reg._id === city.regionId);\n        return {\n          x: attraction.coordinates[0],\n          y: attraction.coordinates[1],\n          region: region.name,\n          attraction: attraction.name\n        };\n      });\n      return scatterData;\n    } else if (graphType === 'stackedBar') {\n      const cityCount = cities.reduce((count, city) => {\n        const districtCount = districts.reduce((distCount, district) => {\n          const attractionsInDistrict = attractions.filter(attraction => attraction.district.name === district.name);\n          distCount[district.name] = attractionsInDistrict.length;\n          return distCount;\n        }, {});\n        count[city.name] = districtCount;\n        return count;\n      }, {});\n      const labels = Object.keys(cityCount);\n      const datasets = [];\n      districts.forEach(district => {\n        const data = labels.map(city => cityCount[city][district.name] || 0);\n        const backgroundColor = `rgba(${getRandomColor()}, 0.6)`;\n        const borderColor = `rgba(${getRandomColor()}, 1)`;\n        datasets.push({\n          label: district.name,\n          data,\n          backgroundColor,\n          borderColor,\n          borderWidth: 1\n        });\n      });\n      return {\n        labels,\n        datasets\n      };\n    } else {\n      const regionCount = attractions.reduce((count, attraction) => {\n        const district = districts.find(dist => dist.name === attraction.district.name);\n        const city = cities.find(cty => cty._id === district.cityId);\n        const region = regions.find(reg => reg._id === city.regionId);\n        const regionName = region.name;\n        count[regionName] = (count[regionName] || 0) + 1;\n        return count;\n      }, {});\n      const labels = Object.keys(regionCount);\n      const counts = Object.values(regionCount);\n      return {\n        labels,\n        counts\n      };\n    }\n  }\n  function renderGraph() {\n    if (graphType === 'bar') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          label: 'Attractions by Region',\n          data: attractionsData.counts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'pie') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: [{\n          data: attractionsData.counts,\n          backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\n          borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Region (Pie Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'scatter') {\n      const scatterData = {\n        datasets: [{\n          label: 'Attractions by Location',\n          data: attractionsData,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by Location (Scatter Plot)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          data: scatterData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this);\n    } else if (graphType === 'stackedBar') {\n      const chartData = {\n        labels: attractionsData.labels,\n        datasets: attractionsData.datasets\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Attractions by City (Stacked Bar Chart)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: graphType,\n      onChange: e => setGraphType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"bar\",\n        children: \"Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pie\",\n        children: \"Pie Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"scatter\",\n        children: \"Scatter Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"stackedBar\",\n        children: \"Stacked Bar Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), renderGraph()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"En/76F/UaHxtN1CtD1yapLxhBfI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Pie","Scatter","Chart","jsxDEV","_jsxDEV","App","_s","graphType","setGraphType","attractionsData","setAttractionsData","fetchAttractionData","regions","cities","districts","attractions","Promise","all","fetch","then","res","json","processedData","processAttractionsData","error","console","scatterData","map","attraction","district","find","dist","name","city","cty","_id","cityId","region","reg","regionId","x","coordinates","y","cityCount","reduce","count","districtCount","distCount","attractionsInDistrict","filter","length","labels","Object","keys","datasets","forEach","data","backgroundColor","getRandomColor","borderColor","push","label","borderWidth","regionCount","regionName","counts","values","renderGraph","chartData","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Graphs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar, Pie, Scatter } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction App() {\r\n  const [graphType, setGraphType] = useState('bar');\r\n  const [attractionsData, setAttractionsData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAttractionData();\r\n  }, []);\r\n\r\n  async function fetchAttractionData() {\r\n    try {\r\n      const [regions, cities, districts, attractions] = await Promise.all([\r\n        fetch('http://localhost:3001/region/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/city/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/district/').then((res) => res.json()),\r\n        fetch('http://localhost:3001/attraction/list').then((res) => res.json())\r\n      ]);\r\n\r\n      // Process the data and set it to the state\r\n      const processedData = processAttractionsData(attractions, districts, cities, regions);\r\n      setAttractionsData(processedData);\r\n    } catch (error) {\r\n      console.error('Error fetching attraction data:', error);\r\n    }\r\n  }\r\n\r\n  function processAttractionsData(attractions, districts, cities, regions) {\r\n  if (graphType === 'scatter') {\r\n    const scatterData = attractions.map((attraction) => {\r\n      const district = districts.find((dist) => dist.name === attraction.district.name);\r\n      const city = cities.find((cty) => cty._id === district.cityId);\r\n      const region = regions.find((reg) => reg._id === city.regionId);\r\n\r\n      return {\r\n        x: attraction.coordinates[0],\r\n        y: attraction.coordinates[1],\r\n        region: region.name,\r\n        attraction: attraction.name\r\n      };\r\n    });\r\n\r\n    return scatterData;\r\n  } else if (graphType === 'stackedBar') {\r\n    const cityCount = cities.reduce((count, city) => {\r\n      const districtCount = districts.reduce((distCount, district) => {\r\n        const attractionsInDistrict = attractions.filter((attraction) => attraction.district.name === district.name);\r\n        distCount[district.name] = attractionsInDistrict.length;\r\n        return distCount;\r\n      }, {});\r\n\r\n      count[city.name] = districtCount;\r\n      return count;\r\n    }, {});\r\n\r\n    const labels = Object.keys(cityCount);\r\n    const datasets = [];\r\n\r\n    districts.forEach((district) => {\r\n      const data = labels.map((city) => cityCount[city][district.name] || 0);\r\n      const backgroundColor = `rgba(${getRandomColor()}, 0.6)`;\r\n      const borderColor = `rgba(${getRandomColor()}, 1)`;\r\n\r\n      datasets.push({\r\n        label: district.name,\r\n        data,\r\n        backgroundColor,\r\n        borderColor,\r\n        borderWidth: 1\r\n      });\r\n    });\r\n\r\n    return {\r\n      labels,\r\n      datasets\r\n    };\r\n  } else {\r\n    const regionCount = attractions.reduce((count, attraction) => {\r\n      const district = districts.find((dist) => dist.name === attraction.district.name);\r\n      const city = cities.find((cty) => cty._id === district.cityId);\r\n      const region = regions.find((reg) => reg._id === city.regionId);\r\n      const regionName = region.name;\r\n\r\n      count[regionName] = (count[regionName] || 0) + 1;\r\n      return count;\r\n    }, {});\r\n\r\n    const labels = Object.keys(regionCount);\r\n    const counts = Object.values(regionCount);\r\n\r\n    return {\r\n      labels,\r\n      counts\r\n    };\r\n  }\r\n}\r\n\r\n  function renderGraph() {\r\n    if (graphType === 'bar') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Region',\r\n            data: attractionsData.counts,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Bar Chart)</h2>\r\n          <Bar data={chartData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'pie') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: [\r\n          {\r\n            data: attractionsData.counts,\r\n            backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)'],\r\n            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'],\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Region (Pie Chart)</h2>\r\n          <Pie data={chartData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'scatter') {\r\n      const scatterData = {\r\n        datasets: [\r\n          {\r\n            label: 'Attractions by Location',\r\n            data: attractionsData,\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by Location (Scatter Plot)</h2>\r\n          <Scatter data={scatterData} />\r\n        </div>\r\n      );\r\n    } else if (graphType === 'stackedBar') {\r\n      const chartData = {\r\n        labels: attractionsData.labels,\r\n        datasets: attractionsData.datasets\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <h2>Attractions by City (Stacked Bar Chart)</h2>\r\n          <Bar data={chartData} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>My App</h1>\r\n      <select value={graphType} onChange={(e) => setGraphType(e.target.value)}>\r\n        <option value=\"bar\">Bar Chart</option>\r\n        <option value=\"pie\">Pie Chart</option>\r\n        <option value=\"scatter\">Scatter Plot</option>\r\n        <option value=\"stackedBar\">Stacked Bar Chart</option>\r\n      </select>\r\n      {renderGraph()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}