{"ast":null,"code":"var _jsxFileName = \"/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Attractions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Attractions() {\n  _s();\n  const [attractions, setAttractions] = useState([]);\n  const [attractions2, setAttractions2] = useState([]);\n  const [oldValues, setOldValues] = useState([]);\n  const [districts, setDistricts] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch('http://localhost:3001/attraction');\n        const data = await res.json();\n\n        // Fetch districts\n        const districtNames = [...new Set(data.map(attraction => attraction.district.name))];\n        const districtPromises = districtNames.map(async districtName => {\n          const res = await fetch('http://localhost:3001/district/' + districtName);\n          return res.json();\n        });\n        const districtResponses = await Promise.all(districtPromises);\n        const fetchedDistricts = districtResponses.reduce((acc, response) => [...acc, ...response], []);\n        setDistricts(fetchedDistricts);\n\n        // Fetch cities\n        const cityNames = [...new Set(fetchedDistricts.map(district => district.city.name))];\n        const cityPromises = cityNames.map(async cityName => {\n          const res = await fetch('http://localhost:3001/city/' + cityName);\n          return res.json();\n        });\n        const cityResponses = await Promise.all(cityPromises);\n        const cities = cityResponses.reduce((acc, response) => [...acc, ...response], []);\n\n        // Combine data and set states\n        const combinedData = data.map(attraction => {\n          const district = fetchedDistricts.find(district => district.name === attraction.district.name);\n          const city = cities.find(city => city.name === district.city.name);\n          return {\n            ...attraction,\n            district,\n            city,\n            isEditing: false\n          };\n        });\n        setAttractions(combinedData);\n        setAttractions2(combinedData);\n        const oldValues1 = combinedData.map(attraction => ({\n          ...attraction\n        }));\n        setOldValues(oldValues1);\n      } catch (error) {\n        console.error('Error fetching attractions:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleEditClick = index => {\n    const updatedAttractions = [...attractions];\n    updatedAttractions[index].isEditing = true;\n    setAttractions(updatedAttractions);\n  };\n  const handleInputChange = (index, field, value) => {\n    const updatedAttractions = attractions.map((attraction, i) => {\n      if (i === index) {\n        return {\n          ...attraction,\n          [field]: value\n        };\n      }\n      return attraction;\n    });\n    setAttractions(updatedAttractions);\n  };\n  const saveOldValues = () => {\n    setOldValues(attractions.map(attraction => ({\n      ...attraction\n    })));\n  };\n  const updateAttraction = async index => {\n    const attraction = attractions[index];\n    const {\n      _id,\n      name: oldName,\n      district,\n      city,\n      coordinates\n    } = attraction;\n    const {\n      name: newName\n    } = attractions2[index];\n    try {\n      var _oldValues$index, _oldValues$index$dist, _oldValues$index2, _oldValues$index2$dis, _oldValues$index4, _oldValues$index4$cit;\n      const updatePromises = [];\n      console.log(newName + ' | ' + oldName);\n\n      // Update district if changed\n      console.log(district + '||' + ((_oldValues$index = oldValues[index]) === null || _oldValues$index === void 0 ? void 0 : (_oldValues$index$dist = _oldValues$index.district) === null || _oldValues$index$dist === void 0 ? void 0 : _oldValues$index$dist.name));\n      if (district !== ((_oldValues$index2 = oldValues[index]) === null || _oldValues$index2 === void 0 ? void 0 : (_oldValues$index2$dis = _oldValues$index2.district) === null || _oldValues$index2$dis === void 0 ? void 0 : _oldValues$index2$dis.name)) {\n        var _oldValues$index3, _oldValues$index3$dis;\n        updatePromises.push(fetch(`http://localhost:3001/district/update/` + ((_oldValues$index3 = oldValues[index]) === null || _oldValues$index3 === void 0 ? void 0 : (_oldValues$index3$dis = _oldValues$index3.district) === null || _oldValues$index3$dis === void 0 ? void 0 : _oldValues$index3$dis._id), {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: district\n          })\n        }));\n      }\n\n      // Update city if changed\n      if (attraction.city.name !== ((_oldValues$index4 = oldValues[index]) === null || _oldValues$index4 === void 0 ? void 0 : (_oldValues$index4$cit = _oldValues$index4.city) === null || _oldValues$index4$cit === void 0 ? void 0 : _oldValues$index4$cit.name)) {\n        var _oldValues$index5, _oldValues$index5$cit;\n        updatePromises.push(fetch(`http://localhost:3001/city/update`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            oldName: (_oldValues$index5 = oldValues[index]) === null || _oldValues$index5 === void 0 ? void 0 : (_oldValues$index5$cit = _oldValues$index5.city) === null || _oldValues$index5$cit === void 0 ? void 0 : _oldValues$index5$cit.name,\n            newName: attraction.city.name\n          })\n        }));\n      }\n\n      // Update coordinates if changed\n      if (newName !== oldName) {\n        updatePromises.push(fetch(`http://localhost:3001/attraction/update/${_id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: oldName,\n            coordinates: coordinates\n          })\n        }));\n      }\n\n      // Wait for all update requests to complete\n      const updateResponses = await Promise.all(updatePromises);\n\n      // Check if all updates were successful\n      const allUpdatesSuccessful = updateResponses.every(res => res.ok);\n      if (allUpdatesSuccessful) {\n        const updatedAttractions = [...attractions];\n        updatedAttractions[index].isEditing = false;\n        setAttractions(updatedAttractions);\n      } else {\n        console.error('Error updating attraction');\n      }\n    } catch (error) {\n      console.error('Error updating attraction:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Attractions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), attractions.map((attraction, index) => {\n      var _attraction$district, _attraction$city;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: attraction.isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attraction.name,\n            onChange: e => handleInputChange(index, 'name', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attraction.district.name,\n            onChange: e => handleInputChange(index, 'district', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attraction.city.name,\n            onChange: e => handleInputChange(index, 'city', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attraction.coordinates[0],\n            onChange: e => handleInputChange(index, 'coordinates', [e.target.value, attraction.coordinates[1]])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attraction.coordinates[1],\n            onChange: e => handleInputChange(index, 'coordinates', [attraction.coordinates[0], e.target.value])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateAttraction(index),\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [attraction.name, \", \", (_attraction$district = attraction.district) === null || _attraction$district === void 0 ? void 0 : _attraction$district.name, \", \", (_attraction$city = attraction.city) === null || _attraction$city === void 0 ? void 0 : _attraction$city.name, \":\", ' ', attraction.coordinates[0], \", \", attraction.coordinates[1]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEditClick(index),\n            onMouseDown: saveOldValues,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(Attractions, \"c5r9iwPHbfOPavrax0LRdUkXJOI=\");\n_c = Attractions;\nexport default Attractions;\nvar _c;\n$RefreshReg$(_c, \"Attractions\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Attractions","_s","attractions","setAttractions","attractions2","setAttractions2","oldValues","setOldValues","districts","setDistricts","fetchData","res","fetch","data","json","districtNames","Set","map","attraction","district","name","districtPromises","districtName","districtResponses","Promise","all","fetchedDistricts","reduce","acc","response","cityNames","city","cityPromises","cityName","cityResponses","cities","combinedData","find","isEditing","oldValues1","error","console","handleEditClick","index","updatedAttractions","handleInputChange","field","value","i","saveOldValues","updateAttraction","_id","oldName","coordinates","newName","_oldValues$index","_oldValues$index$dist","_oldValues$index2","_oldValues$index2$dis","_oldValues$index4","_oldValues$index4$cit","updatePromises","log","_oldValues$index3","_oldValues$index3$dis","push","method","headers","body","JSON","stringify","_oldValues$index5","_oldValues$index5$cit","updateResponses","allUpdatesSuccessful","every","ok","children","fileName","_jsxFileName","lineNumber","columnNumber","_attraction$district","_attraction$city","type","onChange","e","target","onClick","onMouseDown","_c","$RefreshReg$"],"sources":["/Users/zanderanja/Desktop/OutSiders/frontend/src/components/Attractions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Attractions() {\r\n  const [attractions, setAttractions] = useState([]);\r\n  const [attractions2, setAttractions2] = useState([]);\r\n  const [oldValues, setOldValues] = useState([]);\r\n  const [districts, setDistricts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch('http://localhost:3001/attraction');\r\n        const data = await res.json();\r\n\r\n        // Fetch districts\r\n        const districtNames = [...new Set(data.map((attraction) => attraction.district.name))];\r\n        const districtPromises = districtNames.map(async (districtName) => {\r\n          const res = await fetch('http://localhost:3001/district/' + districtName);\r\n          return res.json();\r\n        });\r\n        const districtResponses = await Promise.all(districtPromises);\r\n        const fetchedDistricts = districtResponses.reduce((acc, response) => [...acc, ...response], []);\r\n        setDistricts(fetchedDistricts);\r\n\r\n        // Fetch cities\r\n        const cityNames = [...new Set(fetchedDistricts.map((district) => district.city.name))];\r\n        const cityPromises = cityNames.map(async (cityName) => {\r\n          const res = await fetch('http://localhost:3001/city/' + cityName);\r\n          return res.json();\r\n        });\r\n        const cityResponses = await Promise.all(cityPromises);\r\n        const cities = cityResponses.reduce((acc, response) => [...acc, ...response], []);\r\n\r\n        // Combine data and set states\r\n        const combinedData = data.map((attraction) => {\r\n          const district = fetchedDistricts.find((district) => district.name === attraction.district.name);\r\n          const city = cities.find((city) => city.name === district.city.name);\r\n          return { ...attraction, district, city, isEditing: false };\r\n        });\r\n\r\n        setAttractions(combinedData);\r\n        setAttractions2(combinedData);\r\n        const oldValues1 = combinedData.map((attraction) => ({ ...attraction }));\r\n        setOldValues(oldValues1);\r\n      } catch (error) {\r\n        console.error('Error fetching attractions:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleEditClick = (index) => {\r\n    const updatedAttractions = [...attractions];\r\n    updatedAttractions[index].isEditing = true;\r\n    setAttractions(updatedAttractions);\r\n  };\r\n\r\n  const handleInputChange = (index, field, value) => {\r\n    const updatedAttractions = attractions.map((attraction, i) => {\r\n      if (i === index) {\r\n        return { ...attraction, [field]: value };\r\n      }\r\n      return attraction;\r\n    });\r\n\r\n    setAttractions(updatedAttractions);\r\n  };\r\n\r\n  const saveOldValues = () => {\r\n    setOldValues(attractions.map((attraction) => ({ ...attraction })));\r\n  };\r\n\r\n  const updateAttraction = async (index) => {\r\n    const attraction = attractions[index];\r\n    const { _id, name: oldName, district, city, coordinates } = attraction;\r\n    const { name: newName } = attractions2[index];\r\n\r\n    try {\r\n      const updatePromises = [];\r\n      console.log(newName + ' | ' + oldName);\r\n\r\n      // Update district if changed\r\n      console.log(district + '||' + oldValues[index]?.district?.name);\r\n      if (district !== oldValues[index]?.district?.name) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/district/update/`+oldValues[index]?.district?._id, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name: district\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      // Update city if changed\r\n      if (attraction.city.name !== oldValues[index]?.city?.name) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/city/update`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              oldName: oldValues[index]?.city?.name,\r\n              newName: attraction.city.name,\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      // Update coordinates if changed\r\n      if (newName !== oldName) {\r\n        updatePromises.push(\r\n          fetch(`http://localhost:3001/attraction/update/${_id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              name: oldName,\r\n              coordinates: coordinates,\r\n            }),\r\n          })\r\n        );\r\n      }\r\n\r\n      // Wait for all update requests to complete\r\n      const updateResponses = await Promise.all(updatePromises);\r\n\r\n      // Check if all updates were successful\r\n      const allUpdatesSuccessful = updateResponses.every((res) => res.ok);\r\n\r\n      if (allUpdatesSuccessful) {\r\n        const updatedAttractions = [...attractions];\r\n        updatedAttractions[index].isEditing = false;\r\n        setAttractions(updatedAttractions);\r\n      } else {\r\n        console.error('Error updating attraction');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating attraction:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Attractions:</h3>\r\n      {attractions.map((attraction, index) => (\r\n        <div key={index}>\r\n          {attraction.isEditing ? (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.name}\r\n                onChange={(e) => handleInputChange(index, 'name', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.district.name}\r\n                onChange={(e) => handleInputChange(index, 'district', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.city.name}\r\n                onChange={(e) => handleInputChange(index, 'city', e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.coordinates[0]}\r\n                onChange={(e) =>\r\n                  handleInputChange(index, 'coordinates', [e.target.value, attraction.coordinates[1]])\r\n                }\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={attraction.coordinates[1]}\r\n                onChange={(e) =>\r\n                  handleInputChange(index, 'coordinates', [attraction.coordinates[0], e.target.value])\r\n                }\r\n              />\r\n              <button onClick={() => updateAttraction(index)}>Update</button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <p>\r\n                {attraction.name}, {attraction.district?.name}, {attraction.city?.name}:{' '}\r\n                {attraction.coordinates[0]}, {attraction.coordinates[1]}\r\n              </p>\r\n              <button onClick={() => handleEditClick(index)} onMouseDown={saveOldValues}>\r\n                Edit\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Attractions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}